using System;
using UnityEngine;

namespace Assets.Scripts.Player.Helpers
{
    /// <summary>
    /// Author: Karol Kozuch
    ///
    /// Defines methods used to calculate force that will have influence on objects.
    /// </summary>
    public class ForceCalculator : IDisposable
    {
        /// <summary>
        /// Stores instance of the singleton.
        /// </summary>
        private static ForceCalculator _forceCalculator;

        
        /// <summary>
        /// Returns instance of the singleton.
        /// </summary>
        /// <returns></returns>
        public static ForceCalculator GetInstance()
        {
            if (_forceCalculator == null)
            {
                _forceCalculator = new ForceCalculator();
            }

            return _forceCalculator;
        }

        /// <summary>
        /// Calculates force vector generated by movement of the glove in space. Outcome shall be used on
        /// hooked to the glove object.
        /// </summary>
        /// <param name="distanceAfterMovement">Vector describing current offset of position of object towards the glove.</param>
        /// <param name="referenceDistance">Vector describing initial offset of position of object towards the glove, obtained upon hooking of the object.</param>
        /// <param name="gloveStrength">Force factor of the glove.</param>
        /// <returns></returns>
        public Vector3 GlovePositionalForce(Vector3 distanceAfterMovement, Vector3 referenceDistance, float gloveStrength)
        {
            Vector3 movementForce = distanceAfterMovement - referenceDistance;
            movementForce = -movementForce.normalized;

            return movementForce * gloveStrength;
            //return Vector3.zero;
        }

        /// <summary>
        /// Calculates force vector generated by rotation of the glove in space. Outcome shall be used on
        /// hooked to the glove object.
        /// </summary>
        /// <param name="distanceAfterMovement">Vector describing current offset of position of object towards the glove.</param>
        /// <param name="rotationReferenceVector">Vector that's a reference for the rotation.</param>
        /// <param name="rotation">The rotation.</param>
        /// <param name="gloveStrength">Force factor of the glove.</param>
        /// <returns></returns>
        public Vector3 GloveRotationalForce(Vector3 distanceAfterMovement, Vector3 rotationReferenceVector, Quaternion rotation, float gloveStrength)
        {
            Vector3 distanceAfterRotation = rotation * rotationReferenceVector * distanceAfterMovement.magnitude;
            Vector3 rotationForce = distanceAfterRotation - distanceAfterMovement;
            rotationForce = rotationForce.normalized;
            //Direction is correct

            Debug.Log("referenceDistance: " + distanceAfterMovement);
            Debug.Log("Dist after rotation: " + distanceAfterRotation);
            Debug.Log("Rotation force: " + rotationForce);

            return rotationForce * gloveStrength;
            //return Vector3.zero;
        }
        /// <summary>
        /// Calculates dampening force that can help with stopping orbiting object. Uses currentForceOnObject
        /// as reference.
        /// </summary>
        /// <param name="objectVelocity">Current object velocity.</param>
        /// <param name="currentForceOnObject">Current force applied on object. Dampening vector will inherit its length (value).</param>
        /// <param name="dampeningFactor">Scales the dampening vector to given percent of the current force.</param>
        /// <returns></returns>
        public Vector3 DampeningForce(Vector3 objectVelocity, Vector3 currentForceOnObject, float dampeningFactor)
        {
            Vector3 dampeningForce = -objectVelocity.normalized;
            dampeningForce *= currentForceOnObject.magnitude;
            dampeningForce *= dampeningFactor;

            return dampeningForce;
        }

        /// <summary>
        /// Disposes the singleton.
        /// </summary>
        public void Dispose()
        {
            _forceCalculator = null;
        }
    }
}
